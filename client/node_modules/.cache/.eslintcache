[{"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/index.js":"1","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/App.js":"2","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/auth/Register.js":"3","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/auth/Login.js":"4","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Home.js":"5","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/context/authContext.js":"6","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/layout/Navbar.js":"7","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/DynamicRoutes.js":"8","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Users.js":"9","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js":"10","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/context/messageContext.js":"11","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Message.js":"12"},{"size":147,"mtime":1621114898535,"results":"13","hashOfConfig":"14"},{"size":2262,"mtime":1622540954236,"results":"15","hashOfConfig":"14"},{"size":3310,"mtime":1621159835664,"results":"16","hashOfConfig":"14"},{"size":2407,"mtime":1622309733054,"results":"17","hashOfConfig":"14"},{"size":2155,"mtime":1622310218657,"results":"18","hashOfConfig":"14"},{"size":1310,"mtime":1621163409047,"results":"19","hashOfConfig":"14"},{"size":660,"mtime":1621107865080,"results":"20","hashOfConfig":"14"},{"size":438,"mtime":1621110512579,"results":"21","hashOfConfig":"14"},{"size":1987,"mtime":1622310169580,"results":"22","hashOfConfig":"14"},{"size":3101,"mtime":1622308226489,"results":"23","hashOfConfig":"14"},{"size":1785,"mtime":1622539752794,"results":"24","hashOfConfig":"14"},{"size":2477,"mtime":1622537267790,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1hbb8e0",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/index.js",[],["57","58"],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/App.js",["59"],"import './App.scss';\nimport { Container } from 'react-bootstrap';\nimport { Register } from './components/auth/Register';\nimport { Login } from './components/auth/Login';\nimport {\n\tApolloClient,\n\tInMemoryCache,\n\tcreateHttpLink,\n\tApolloProvider,\n\tsplit,\n} from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/pages/Home';\nimport { AuthProvider } from './context/authContext';\nimport { MessageProvider } from './context/messageContext';\nimport DynamicRoutes from './DynamicRoutes';\n\nlet httpLink = createHttpLink({\n\turi: process.env.REACT_APP_GQL_ENDPOINT,\n});\n\nconst authLink = setContext((_, { headers }) => {\n\t// get the authentication token from local storage if it exists\n\tconst token = localStorage.getItem('token');\n\t// return the headers to the context so httpLink can read them\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : '',\n\t\t},\n\t};\n});\nhttpLink = authLink.concat(httpLink);\nconst wsLink = new WebSocketLink({\n\turi: process.env.REACT_APP_GQL_WS_ENDPOINT,\n\toptions: {\n\t\treconnect: true,\n\t\tconnectionParams: {\n\t\t\tAuthorization: `Bearer ${localStorage.getItem('token')}`,\n\t\t},\n\t},\n});\n\nconst splitLink = split(\n\t({ query }) => {\n\t\tconst definition = getMainDefinition(query);\n\t\treturn (\n\t\t\tdefinition.kind === 'OperationDefinition' &&\n\t\t\tdefinition.operation === 'subscription'\n\t\t);\n\t},\n\twsLink,\n\thttpLink\n);\n\nconst client = new ApolloClient({\n\tlink: splitLink,\n\tcache: new InMemoryCache(),\n});\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<AuthProvider>\n\t\t\t\t<MessageProvider>\n\t\t\t\t\t<Router>\n\t\t\t\t\t\t<Container className='pt-5'>\n\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t<DynamicRoutes\n\t\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\t\tpath='/register'\n\t\t\t\t\t\t\t\t\tcomponent={Register}\n\t\t\t\t\t\t\t\t\tguest\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<DynamicRoutes exact path='/login' component={Login} guest />\n\t\t\t\t\t\t\t\t<DynamicRoutes exact path='/' component={Home} authenticated />\n\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Router>\n\t\t\t\t</MessageProvider>\n\t\t\t</AuthProvider>\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;\n","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/auth/Register.js",[],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/auth/Login.js",["60"],"import React, { Fragment, useState } from 'react';\nimport { Row, Col, Form, Button, Spinner } from 'react-bootstrap';\nimport { useLazyQuery, gql } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { useAuthDispatch } from '../../context/authContext';\n\nconst LOGIN_USER = gql`\n\tquery login($username: String!, $password: String!) {\n\t\tlogin(username: $username, password: $password) {\n\t\t\t_id\n\t\t\tusername\n\t\t\temail\n\t\t\tcreatedAt\n\t\t\ttoken\n\t\t}\n\t}\n`;\nexport const Login = props => {\n\tconst [values, setValues] = useState({\n\t\tusername: '',\n\t\tpassword: '',\n\t});\n\tconst [errors, setErrors] = useState({});\n\tconst dispatch = useAuthDispatch();\n\tconst [loginUser, { loading }] = useLazyQuery(LOGIN_USER, {\n\t\tonError: err => setErrors(err.graphQLErrors[0].extensions.errors),\n\t\tonCompleted: data => {\n\t\t\tdispatch({ type: 'LOGIN', payload: data.login });\n\t\t\twindow.location.href = '/';\n\t\t},\n\t});\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tloginUser({ variables: values });\n\t};\n\n\tconst { username, password } = values;\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Row\n\t\t\t\tclassName='authform bg-white py-5 justify-content-center'\n\t\t\t\tstyle={{ opacity: '70%' }}\n\t\t\t>\n\t\t\t\t<Col sm={8} md={6} lg={4}>\n\t\t\t\t\t<h1 className='text-center'>Login</h1>\n\t\t\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t<Form.Label className={errors.username && 'text-danger'}>\n\t\t\t\t\t\t\t\t{errors.username ?? 'Username'}\n\t\t\t\t\t\t\t</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tvalue={username}\n\t\t\t\t\t\t\t\tclassName={errors.username && 'is-invalid'}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tsetValues({ ...values, username: e.target.value });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t<Form.Label className={errors.password && 'text-danger'}>\n\t\t\t\t\t\t\t\t{errors.password ?? 'Password'}\n\t\t\t\t\t\t\t</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\tclassName={errors.password && 'is-invalid'}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tsetValues({ ...values, password: e.target.value });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t<div className='text-center'>\n\t\t\t\t\t\t\t<Button variant='success' type='submit' disabled={loading}>\n\t\t\t\t\t\t\t\t{loading ? 'Loading...' : 'Login'}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\tDon't have an account ? <Link to='/register'>Register</Link>\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Fragment>\n\t);\n};\n","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Home.js",["61"],"import React, { Fragment, useEffect } from 'react';\nimport { Row, Navbar, Nav } from 'react-bootstrap';\nimport { gql, useSubscription } from '@apollo/client';\nimport { useAuthDispatch, useAuthState } from '../../context/authContext';\nimport Users from './Users';\nimport Messages from './Messages';\nimport { useMessageDispatch } from '../../context/messageContext';\n\nconst NEW_MESSAGE = gql`\n\tsubscription newMessage {\n\t\tnewMessage {\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tfrom\n\t\t\tto\n\t\t}\n\t}\n`;\n\nconst Home = ({ history }) => {\n\tconst authdispatch = useAuthDispatch();\n\tconst messageDispatch = useMessageDispatch();\n\tconst { user } = useAuthState();\n\n\tconst { data: messageData, error: messageError } =\n\t\tuseSubscription(NEW_MESSAGE);\n\n\tuseEffect(() => {\n\t\tif (messageError) console.log(messageError);\n\t\tif (messageData) {\n\t\t\tconst message = messageData.newMessage;\n\t\t\tconst otherUser =\n\t\t\t\tuser.username === message.to ? message.from : message.to;\n\t\t\tmessageDispatch({\n\t\t\t\ttype: 'ADD_MESSAGE',\n\t\t\t\tpayload: { username: otherUser, message },\n\t\t\t});\n\t\t}\n\t}, [messageError, messageData]);\n\n\tconst logout = () => {\n\t\tauthdispatch({ type: 'LOGOUT' });\n\t\twindow.location.href = '/login';\n\t};\n\n\treturn (\n\t\t// <Row className='bg-white justify-content-around'>\n\t\t// \t<Link to='/login'>\n\t\t// \t\t<Button variant='link'>Login</Button>\n\t\t// \t</Link>\n\t\t// \t<Link to='/register'>\n\t\t// \t\t<Button variant='link'>Register</Button>\n\t\t// \t</Link>\n\t\t// \t<Button variant='link' onClick={logout}>\n\t\t// \t\tLogout\n\t\t// \t</Button>\n\t\t// </Row>\n\t\t<Fragment>\n\t\t\t<Navbar bg='light' expand='lg' className='mb-3'>\n\t\t\t\t<Navbar.Brand href='#home'>MaChat</Navbar.Brand>\n\t\t\t\t<Navbar.Toggle aria-controls='basic-navbar-nav' />\n\n\t\t\t\t<Navbar.Collapse id='basic-navbar-nav' className='justify-content-end'>\n\t\t\t\t\t<Nav>\n\t\t\t\t\t\t<Nav.Link onClick={logout}>Logout</Nav.Link>\n\t\t\t\t\t</Nav>\n\t\t\t\t\t{/* <Form inline>\n\t\t\t\t\t<FormControl type='text' placeholder='Search' className='mr-sm-2' />\n\t\t\t\t\t<Button variant='outline-success'>Search</Button>\n\t\t\t\t</Form> */}\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Navbar>\n\t\t\t<Row className='m-0 bg-white holder'>\n\t\t\t\t<Users />\n\t\t\t\t<Messages />\n\t\t\t</Row>\n\t\t</Fragment>\n\t);\n};\n\nexport default Home;\n","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/context/authContext.js",[],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/layout/Navbar.js",[],["62","63"],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/DynamicRoutes.js",[],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Users.js",[],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js",["64","65"],"import React, { useEffect, useState } from 'react';\nimport { gql, useLazyQuery, useMutation } from '@apollo/client';\nimport { Col, Form } from 'react-bootstrap';\nimport {\n\tuseMessageDispatch,\n\tuseMessageState,\n} from '../../context/messageContext';\nimport Message from './Message';\nimport { Fragment } from 'react';\n\nconst SEND_MESSAGE = gql`\n\tmutation sendMessage($to: String!, $content: String!) {\n\t\tsendMessage(to: $to, content: $content) {\n\t\t\t_id\n\t\t\tfrom\n\t\t\tto\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\n\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\n\nconst Messages = () => {\n\tconst { users } = useMessageState();\n\tconst selectedUser = users?.find(u => u.selected === true);\n\tconst [content, setContent] = useState('');\n\tconst messages = selectedUser?.messages;\n\tconst dispatch = useMessageDispatch();\n\tconst [getMessages, { loading: messagesLoading, data: messagesData }] =\n\t\tuseLazyQuery(GET_MESSAGES);\n\n\tconst [sendMessage] = useMutation(SEND_MESSAGE, {\n\t\tonError: err => console.log(err),\n\t});\n\n\tuseEffect(() => {\n\t\tif (selectedUser && !selectedUser.messages) {\n\t\t\tgetMessages({ variables: { from: selectedUser.username } });\n\t\t}\n\t}, [selectedUser]);\n\tuseEffect(() => {\n\t\tif (messagesData) {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_USER_MESSAGES',\n\t\t\t\tpayload: {\n\t\t\t\t\tusername: selectedUser.username,\n\t\t\t\t\tmessages: messagesData.getMessages,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}, [messagesData]);\n\n\tlet selectedChatMarkup;\n\n\tif (!messages && !messagesLoading) {\n\t\tselectedChatMarkup = <p className='info-text'>Select a friend</p>;\n\t} else if (messagesLoading) {\n\t\tselectedChatMarkup = <p className='info-text'>Loading...</p>;\n\t} else if (messages && messages.length > 0) {\n\t\tselectedChatMarkup = messages.map((message, index) => (\n\t\t\t<Fragment key={message._id}>\n\t\t\t\t<Message message={message} />\n\t\t\t\t{index === message.length - 1 && (\n\t\t\t\t\t<div className='invisible'>\n\t\t\t\t\t\t<hr className='m-0' />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Fragment>\n\t\t));\n\t} else if (messages.length === 0) {\n\t\tselectedChatMarkup = (\n\t\t\t<p className='info-text'>\n\t\t\t\tYou are now connected! send your first message!\n\t\t\t</p>\n\t\t);\n\t}\n\n\tconst submitMessage = e => {\n\t\te.preventDefault();\n\t\tif (content.trim() === '' || !selectedUser) return;\n\t\t// mutation for sending message\n\t\tsendMessage({ variables: { to: selectedUser.username, content } });\n\t\tsetContent('');\n\t};\n\n\treturn (\n\t\t<Col xs={10} md={8}>\n\t\t\t<div className='messages-box d-flex flex-column-reverse'>\n\t\t\t\t{selectedChatMarkup}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Form onSubmit={submitMessage}>\n\t\t\t\t\t<Form.Group className='d-flex align-items-center'>\n\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tclassName='rounded-pill p-4 border-0'\n\t\t\t\t\t\t\tstyle={{ backgroundColor: '#F2F3F4' }}\n\t\t\t\t\t\t\tplaceholder='Type a message...'\n\t\t\t\t\t\t\tvalue={content}\n\t\t\t\t\t\t\tonChange={e => setContent(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<i\n\t\t\t\t\t\t\tclassName='fas fa-paper-plane fa-2x text-primary ml-2'\n\t\t\t\t\t\t\tonClick={submitMessage}\n\t\t\t\t\t\t\trole='button'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</Col>\n\t);\n};\n\nexport default Messages;\n","/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/context/messageContext.js",[],"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Message.js",["66","67"],"import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { useAuthState } from '../../context/authContext';\nimport moment from 'moment';\nimport { gql, useMutation, useSubscription } from '@apollo/client';\nimport { Button, OverlayTrigger, Popover, Tooltip } from 'react-bootstrap';\n\nconst reactions = [\n\t'❤️',\n\t'😂',\n\t'😭',\n\t'😒',\n\t'👌',\n\t'😘',\n\t'💕',\n\t'😁',\n\t'🙈',\n\t'😡',\n\t'🥶',\n];\nconst REACT_TO_MESSAGE = gql`\n\tmutation reactToMessage($_id: String!, $content: String!) {\n\t\treactToMessage(_id: $_id, content: $content) {\n\t\t\t_id\n\t\t}\n\t}\n`;\nconst Message = ({ message }) => {\n\tconst { user } = useAuthState();\n\tconst sent = message.from === user.username;\n\tconst received = !sent;\n\tconst [showPopover, setShowPopover] = useState(false);\n\n\tconst [reactToMessage] = useMutation(REACT_TO_MESSAGE, {\n\t\tonCompleted: data => setShowPopover(false),\n\t\tonError: err => console.log(err),\n\t});\n\n\tconst react = reaction => {\n\t\t// console.log(`Reacting ${reaction} to message ${message._id}`);\n\t\treactToMessage({ variables: { _id: message._id, content: reaction } });\n\t};\n\n\tconst reactButton = (\n\t\t<OverlayTrigger\n\t\t\ttrigger='click'\n\t\t\tplacement='top'\n\t\t\tshow={showPopover}\n\t\t\tonToggle={setShowPopover}\n\t\t\ttransition={false}\n\t\t\trootClose\n\t\t\toverlay={\n\t\t\t\t<Popover className='rounded-pill'>\n\t\t\t\t\t<Popover.Content className='d-flex px-0 py-1 align-items-center react-button-popover'>\n\t\t\t\t\t\t{reactions.map(reaction => (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant='link'\n\t\t\t\t\t\t\t\tclassName='react-icon-button'\n\t\t\t\t\t\t\t\tkey={reaction}\n\t\t\t\t\t\t\t\tonClick={() => react(reaction)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{reaction}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Popover.Content>\n\t\t\t\t</Popover>\n\t\t\t}\n\t\t>\n\t\t\t<Button variant='link' className='px-2'>\n\t\t\t\t<i className='far fa-smile' />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames('d-flex my-3', {\n\t\t\t\t'ml-auto': sent,\n\t\t\t\t'mr-auto': received,\n\t\t\t})}\n\t\t>\n\t\t\t{/* {sent && reactButton} */}\n\t\t\t<OverlayTrigger\n\t\t\t\tplacement={sent ? 'right' : 'left'}\n\t\t\t\toverlay={\n\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t{moment(message.createdAt).format('MMMM Do YYYY, h:mm:ss a')}\n\t\t\t\t\t</Tooltip>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames('py-2 px-3 rounded-pill ', {\n\t\t\t\t\t\t'bg-primary': sent,\n\t\t\t\t\t\treceiver: received,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t<p className={classNames({ 'text-white': sent })}>\n\t\t\t\t\t\t{message.content}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</OverlayTrigger>\n\t\t\t{/* {received && reactButton} */}\n\t\t</div>\n\t);\n};\n\nexport default Message;\n",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":15,"column":35,"nodeType":"74","messageId":"75","endLine":15,"endColumn":40},{"ruleId":"72","severity":1,"message":"76","line":2,"column":34,"nodeType":"74","messageId":"75","endLine":2,"endColumn":41},{"ruleId":"77","severity":1,"message":"78","line":39,"column":5,"nodeType":"79","endLine":39,"endColumn":32,"suggestions":"80"},{"ruleId":"68","replacedBy":"81"},{"ruleId":"70","replacedBy":"82"},{"ruleId":"77","severity":1,"message":"83","line":52,"column":5,"nodeType":"79","endLine":52,"endColumn":19,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":63,"column":5,"nodeType":"79","endLine":63,"endColumn":19,"suggestions":"86"},{"ruleId":"72","severity":1,"message":"87","line":5,"column":28,"nodeType":"74","messageId":"75","endLine":5,"endColumn":43},{"ruleId":"72","severity":1,"message":"88","line":44,"column":8,"nodeType":"74","messageId":"75","endLine":44,"endColumn":19},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'messageDispatch' and 'user.username'. Either include them or remove the dependency array.","ArrayExpression",["91"],["89"],["90"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["92"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUser.username'. Either include them or remove the dependency array.",["93"],"'useSubscription' is defined but never used.","'reactButton' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [messageError, messageData, user.username, messageDispatch]",{"range":"100","text":"101"},"Update the dependencies array to be: [getMessages, selectedUser]",{"range":"102","text":"103"},"Update the dependencies array to be: [dispatch, messagesData, selectedUser.username]",{"range":"104","text":"105"},[1043,1070],"[messageError, messageData, user.username, messageDispatch]",[1235,1249],"[getMessages, selectedUser]",[1454,1468],"[dispatch, messagesData, selectedUser.username]"]