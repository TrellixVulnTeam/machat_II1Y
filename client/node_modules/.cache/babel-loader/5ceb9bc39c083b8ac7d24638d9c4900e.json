{"ast":null,"code":"var _jsxFileName = \"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { gql, useLazyQuery, useMutation } from '@apollo/client';\nimport { Col, Form } from 'react-bootstrap';\nimport { useMessageDispatch, useMessageState } from '../../context/messageContext';\nimport Message from './Message';\nimport { Fragment } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEND_MESSAGE = gql`\n\tmutation sendMessage($to: String!, $content: String!) {\n\t\tsendMessage(to: $to, content: $content) {\n\t\t\t_id\n\t\t\tfrom\n\t\t\tto\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\n\nconst Messages = () => {\n  _s();\n\n  const {\n    users\n  } = useMessageState();\n  const selectedUser = users === null || users === void 0 ? void 0 : users.find(u => u.selected === true);\n  const [content, setContent] = useState('');\n  const messages = selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.messages;\n  const dispatch = useMessageDispatch();\n  const [getMessages, {\n    loading: messagesLoading,\n    data: messagesData\n  }] = useLazyQuery(GET_MESSAGES);\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onCompleted: data => dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        username: selectedUser.username,\n        message: data.sendMessage\n      }\n    }),\n    onError: err => console.log(err)\n  });\n  useEffect(() => {\n    if (selectedUser && !selectedUser.messages) {\n      getMessages({\n        variables: {\n          from: selectedUser.username\n        }\n      });\n    }\n  }, [selectedUser]);\n  useEffect(() => {\n    if (messagesData) {\n      dispatch({\n        type: 'SET_USER_MESSAGES',\n        payload: {\n          username: selectedUser.username,\n          messages: messagesData.getMessages\n        }\n      });\n    }\n  }, [messagesData]);\n  let selectedChatMarkup;\n\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"Select a friend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 24\n    }, this);\n  } else if (messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 24\n    }, this);\n  } else if (messages && messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), index === message.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invisible\",\n        children: /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 6\n      }, this)]\n    }, message._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this));\n  } else if (messages.length === 0) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"You are now connected! send your first message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this);\n  }\n\n  const submitMessage = e => {\n    e.preventDefault();\n    if (content === '' || !selectedUser) return; // mutation for sending message\n\n    sendMessage({\n      variables: {\n        to: selectedUser.username,\n        content\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 10,\n    md: 8,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-box d-flex flex-column-reverse\",\n      children: selectedChatMarkup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitMessage,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            className: \"rounded-pill p-4 border-0\",\n            style: {\n              backgroundColor: '#F2F3F4'\n            },\n            placeholder: \"Type a message...\",\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Messages, \"FBb3Ecvfss36PkRnwIUg9Q9g7x4=\", false, function () {\n  return [useMessageState, useMessageDispatch, useLazyQuery, useMutation];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js"],"names":["React","useEffect","useState","gql","useLazyQuery","useMutation","Col","Form","useMessageDispatch","useMessageState","Message","Fragment","SEND_MESSAGE","GET_MESSAGES","Messages","users","selectedUser","find","u","selected","content","setContent","messages","dispatch","getMessages","loading","messagesLoading","data","messagesData","sendMessage","onCompleted","type","payload","username","message","onError","err","console","log","variables","from","selectedChatMarkup","length","map","index","_id","submitMessage","e","preventDefault","to","backgroundColor","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { gql, useLazyQuery, useMutation } from '@apollo/client';\nimport { Col, Form } from 'react-bootstrap';\nimport {\n\tuseMessageDispatch,\n\tuseMessageState,\n} from '../../context/messageContext';\nimport Message from './Message';\nimport { Fragment } from 'react';\n\nconst SEND_MESSAGE = gql`\n\tmutation sendMessage($to: String!, $content: String!) {\n\t\tsendMessage(to: $to, content: $content) {\n\t\t\t_id\n\t\t\tfrom\n\t\t\tto\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\n\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\n\nconst Messages = () => {\n\tconst { users } = useMessageState();\n\tconst selectedUser = users?.find(u => u.selected === true);\n\tconst [content, setContent] = useState('');\n\tconst messages = selectedUser?.messages;\n\tconst dispatch = useMessageDispatch();\n\tconst [getMessages, { loading: messagesLoading, data: messagesData }] =\n\t\tuseLazyQuery(GET_MESSAGES);\n\n\tconst [sendMessage] = useMutation(SEND_MESSAGE, {\n\t\tonCompleted: data =>\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_MESSAGE',\n\t\t\t\tpayload: { username: selectedUser.username, message: data.sendMessage },\n\t\t\t}),\n\t\tonError: err => console.log(err),\n\t});\n\n\tuseEffect(() => {\n\t\tif (selectedUser && !selectedUser.messages) {\n\t\t\tgetMessages({ variables: { from: selectedUser.username } });\n\t\t}\n\t}, [selectedUser]);\n\tuseEffect(() => {\n\t\tif (messagesData) {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_USER_MESSAGES',\n\t\t\t\tpayload: {\n\t\t\t\t\tusername: selectedUser.username,\n\t\t\t\t\tmessages: messagesData.getMessages,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}, [messagesData]);\n\n\tlet selectedChatMarkup;\n\n\tif (!messages && !messagesLoading) {\n\t\tselectedChatMarkup = <p className='info-text'>Select a friend</p>;\n\t} else if (messagesLoading) {\n\t\tselectedChatMarkup = <p className='info-text'>Loading...</p>;\n\t} else if (messages && messages.length > 0) {\n\t\tselectedChatMarkup = messages.map((message, index) => (\n\t\t\t<Fragment key={message._id}>\n\t\t\t\t<Message message={message} />\n\t\t\t\t{index === message.length - 1 && (\n\t\t\t\t\t<div className='invisible'>\n\t\t\t\t\t\t<hr className='m-0' />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Fragment>\n\t\t));\n\t} else if (messages.length === 0) {\n\t\tselectedChatMarkup = (\n\t\t\t<p className='info-text'>\n\t\t\t\tYou are now connected! send your first message!\n\t\t\t</p>\n\t\t);\n\t}\n\n\tconst submitMessage = e => {\n\t\te.preventDefault();\n\t\tif (content === '' || !selectedUser) return;\n\t\t// mutation for sending message\n\t\tsendMessage({ variables: { to: selectedUser.username, content } });\n\t};\n\n\treturn (\n\t\t<Col xs={10} md={8}>\n\t\t\t<div className='messages-box d-flex flex-column-reverse'>\n\t\t\t\t{selectedChatMarkup}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Form onSubmit={submitMessage}>\n\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tclassName='rounded-pill p-4 border-0'\n\t\t\t\t\t\t\tstyle={{ backgroundColor: '#F2F3F4' }}\n\t\t\t\t\t\t\tplaceholder='Type a message...'\n\t\t\t\t\t\t\tvalue={content}\n\t\t\t\t\t\t\tonChange={e => setContent(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</Col>\n\t);\n};\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}