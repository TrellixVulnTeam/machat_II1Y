{"ast":null,"code":"var _jsxFileName = \"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { Col } from 'react-bootstrap';\nimport { useMessageDispatch, useMessageState } from '../../context/messageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\n\nconst Messages = () => {\n  _s();\n\n  const {\n    users\n  } = useMessageState();\n  const selectedUser = users === null || users === void 0 ? void 0 : users.find(u => u.selected === true);\n  const dispatch = useMessageDispatch();\n  const [getMessages, {\n    loading: messagesLoading,\n    data: messagesData\n  }] = useLazyQuery(GET_MESSAGES);\n  useEffect(() => {\n    if (selectedUser && !selectedUser.messages) {\n      getMessages({\n        variables: {\n          from: selectedUser.username\n        }\n      });\n    }\n  }, [selectedUser]);\n  useEffect(() => {\n    if (messagesData) {\n      dispatch({\n        type: 'SET_USER_MESSAGE',\n        payload: {\n          username: selectedUser.username,\n          messages: messagesData.getMessages\n        }\n      });\n    }\n  }, [messagesData]);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 8,\n    children: messagesData && messagesData.getMessages.length > 0 ? messagesData.getMessages.map(message => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message.content\n    }, message._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 6\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You are now connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Messages, \"vSzeMo503j3hb4XcJ3JkaWwdR7o=\", false, function () {\n  return [useMessageState, useMessageDispatch, useLazyQuery];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js"],"names":["React","useEffect","gql","useLazyQuery","Col","useMessageDispatch","useMessageState","GET_MESSAGES","Messages","users","selectedUser","find","u","selected","dispatch","getMessages","loading","messagesLoading","data","messagesData","messages","variables","from","username","type","payload","length","map","message","content","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SACCC,kBADD,EAECC,eAFD,QAGO,8BAHP;;AAKA,MAAMC,YAAY,GAAGL,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAWA,MAAMM,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAYH,eAAe,EAAjC;AACA,QAAMI,YAAY,GAAGD,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEE,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAe,IAAhC,CAArB;AACA,QAAMC,QAAQ,GAAGT,kBAAkB,EAAnC;AACA,QAAM,CAACU,WAAD,EAAc;AAAEC,IAAAA,OAAO,EAAEC,eAAX;AAA4BC,IAAAA,IAAI,EAAEC;AAAlC,GAAd,IACLhB,YAAY,CAACI,YAAD,CADb;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIS,YAAY,IAAI,CAACA,YAAY,CAACU,QAAlC,EAA4C;AAC3CL,MAAAA,WAAW,CAAC;AAAEM,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAEZ,YAAY,CAACa;AAArB;AAAb,OAAD,CAAX;AACA;AACD,GAJQ,EAIN,CAACb,YAAD,CAJM,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIkB,YAAJ,EAAkB;AACjBL,MAAAA,QAAQ,CAAC;AACRU,QAAAA,IAAI,EAAE,kBADE;AAERC,QAAAA,OAAO,EAAE;AACRF,UAAAA,QAAQ,EAAEb,YAAY,CAACa,QADf;AAERH,UAAAA,QAAQ,EAAED,YAAY,CAACJ;AAFf;AAFD,OAAD,CAAR;AAOA;AACD,GAVQ,EAUN,CAACI,YAAD,CAVM,CAAT;AAYA,sBACC,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA,cACEA,YAAY,IAAIA,YAAY,CAACJ,WAAb,CAAyBW,MAAzB,GAAkC,CAAlD,GACAP,YAAY,CAACJ,WAAb,CAAyBY,GAAzB,CAA6BC,OAAO,iBACnC;AAAA,gBAAsBA,OAAO,CAACC;AAA9B,OAAQD,OAAO,CAACE,GAAhB;AAAA;AAAA;AAAA;AAAA,YADD,CADA,gBAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CAnCD;;GAAMtB,Q;UACaF,e,EAEDD,kB,EAEhBF,Y;;;KALIK,Q;AAqCN,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { Col } from 'react-bootstrap';\nimport {\n\tuseMessageDispatch,\n\tuseMessageState,\n} from '../../context/messageContext';\n\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\nconst Messages = () => {\n\tconst { users } = useMessageState();\n\tconst selectedUser = users?.find(u => u.selected === true);\n\tconst dispatch = useMessageDispatch();\n\tconst [getMessages, { loading: messagesLoading, data: messagesData }] =\n\t\tuseLazyQuery(GET_MESSAGES);\n\n\tuseEffect(() => {\n\t\tif (selectedUser && !selectedUser.messages) {\n\t\t\tgetMessages({ variables: { from: selectedUser.username } });\n\t\t}\n\t}, [selectedUser]);\n\tuseEffect(() => {\n\t\tif (messagesData) {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_USER_MESSAGE',\n\t\t\t\tpayload: {\n\t\t\t\t\tusername: selectedUser.username,\n\t\t\t\t\tmessages: messagesData.getMessages,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}, [messagesData]);\n\n\treturn (\n\t\t<Col xs={8}>\n\t\t\t{messagesData && messagesData.getMessages.length > 0 ? (\n\t\t\t\tmessagesData.getMessages.map(message => (\n\t\t\t\t\t<p key={message._id}>{message.content}</p>\n\t\t\t\t))\n\t\t\t) : (\n\t\t\t\t<p>You are now connected</p>\n\t\t\t)}\n\t\t</Col>\n\t);\n};\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}