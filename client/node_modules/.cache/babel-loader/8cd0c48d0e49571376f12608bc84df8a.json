{"ast":null,"code":"var _jsxFileName = \"/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { Col } from 'react-bootstrap';\nimport { useMessageDispatch, useMessageState } from '../../context/messageContext';\nimport Message from './Message';\nimport { Fragment } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\n\nconst Messages = () => {\n  _s();\n\n  const {\n    users\n  } = useMessageState();\n  const selectedUser = users === null || users === void 0 ? void 0 : users.find(u => u.selected === true);\n  const messages = selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.messages;\n  const dispatch = useMessageDispatch();\n  const [getMessages, {\n    loading: messagesLoading,\n    data: messagesData\n  }] = useLazyQuery(GET_MESSAGES);\n  useEffect(() => {\n    if (selectedUser && !selectedUser.messages) {\n      getMessages({\n        variables: {\n          from: selectedUser.username\n        }\n      });\n    }\n  }, [selectedUser]);\n  useEffect(() => {\n    if (messagesData) {\n      dispatch({\n        type: 'SET_USER_MESSAGES',\n        payload: {\n          username: selectedUser.username,\n          messages: messagesData.getMessages\n        }\n      });\n    }\n  }, [messagesData]);\n  let selectedChatMarkup;\n\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a friend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this);\n  } else if (messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 24\n    }, this);\n  } else if (messages && messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), index === message.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invisible\",\n        children: /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this));\n  } else if (messages.length === 0) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You are now connected! send your first message!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 24\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 8,\n    className: \"messages-box d-flex flex-column-reverse\",\n    children: selectedChatMarkup\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Messages, \"vSzeMo503j3hb4XcJ3JkaWwdR7o=\", false, function () {\n  return [useMessageState, useMessageDispatch, useLazyQuery];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/bensontamunoemi/Desktop/Web Projects/React-Applications/MaChat/client/src/components/pages/Messages.js"],"names":["React","useEffect","gql","useLazyQuery","Col","useMessageDispatch","useMessageState","Message","Fragment","GET_MESSAGES","Messages","users","selectedUser","find","u","selected","messages","dispatch","getMessages","loading","messagesLoading","data","messagesData","variables","from","username","type","payload","selectedChatMarkup","length","map","message","index","_id"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { Col } from 'react-bootstrap';\nimport {\n\tuseMessageDispatch,\n\tuseMessageState,\n} from '../../context/messageContext';\nimport Message from './Message';\nimport { Fragment } from 'react';\n\nconst GET_MESSAGES = gql`\n\tquery getMessages($from: String!) {\n\t\tgetMessages(from: $from) {\n\t\t\t_id\n\t\t\tcontent\n\t\t\tcreatedAt\n\t\t\tto\n\t\t\tfrom\n\t\t}\n\t}\n`;\nconst Messages = () => {\n\tconst { users } = useMessageState();\n\tconst selectedUser = users?.find(u => u.selected === true);\n\tconst messages = selectedUser?.messages;\n\tconst dispatch = useMessageDispatch();\n\tconst [getMessages, { loading: messagesLoading, data: messagesData }] =\n\t\tuseLazyQuery(GET_MESSAGES);\n\n\tuseEffect(() => {\n\t\tif (selectedUser && !selectedUser.messages) {\n\t\t\tgetMessages({ variables: { from: selectedUser.username } });\n\t\t}\n\t}, [selectedUser]);\n\tuseEffect(() => {\n\t\tif (messagesData) {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_USER_MESSAGES',\n\t\t\t\tpayload: {\n\t\t\t\t\tusername: selectedUser.username,\n\t\t\t\t\tmessages: messagesData.getMessages,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}, [messagesData]);\n\n\tlet selectedChatMarkup;\n\n\tif (!messages && !messagesLoading) {\n\t\tselectedChatMarkup = <p>Select a friend</p>;\n\t} else if (messagesLoading) {\n\t\tselectedChatMarkup = <p>Loading...</p>;\n\t} else if (messages && messages.length > 0) {\n\t\tselectedChatMarkup = messages.map((message, index) => (\n\t\t\t<Fragment>\n\t\t\t\t<Message key={message._id} message={message} />\n\t\t\t\t{index === message.length - 1 && (\n\t\t\t\t\t<div className='invisible'>\n\t\t\t\t\t\t<hr className='m-0' />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Fragment>\n\t\t));\n\t} else if (messages.length === 0) {\n\t\tselectedChatMarkup = <p>You are now connected! send your first message!</p>;\n\t}\n\n\treturn (\n\t\t<Col xs={8} className='messages-box d-flex flex-column-reverse'>\n\t\t\t{selectedChatMarkup}\n\t\t</Col>\n\t);\n};\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}